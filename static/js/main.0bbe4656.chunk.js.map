{"version":3,"sources":["assets/img/logo.svg","Components/Navbars/style.js","Components/Navbars/index.js","Components/Header/index.js","Components/Footer/style.js","Components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navwrapper","style","div","Navbars","props","Container","Navbar","expand","to","src","require","alt","Toggle","aria-controls","Collapse","id","Form","inline","FormControl","type","placeholder","className","Nav","NavDropdown","title","Item","href","Divider","Header","Copyright","Footer","Homepage","React","lazy","SinglePage","App","useState","loadering","setLoading","useEffect","setTimeout","color","size","duration","basename","Suspense","fallback","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,ykBCEpC,IAAMC,EAAaC,UAAMC,IAAT,K,QCiERC,EAjDC,SAACC,GACf,OACE,kBAAC,WAAD,KACE,kBAACJ,EAAD,KACE,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,MACb,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKC,IAAKC,EAAQ,IAAgCC,IAAI,UAExD,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAAC,IAAD,MACA,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,SACZC,UAAU,cAId,kBAACC,EAAA,EAAD,CAAKD,UAAU,WACb,kBAAC,IAAD,CAAMb,GAAG,IAAIa,UAAU,YAAvB,QAGA,kBAAC,IAAD,CAAMb,GAAG,UAAUa,UAAU,YAA7B,UAGA,kBAACE,EAAA,EAAD,CAAaC,MAAM,WAAWT,GAAG,sBAC/B,kBAACQ,EAAA,EAAYE,KAAb,CAAkBC,KAAK,eAAvB,UACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBC,KAAK,eAAvB,kBAGA,kBAACH,EAAA,EAAYE,KAAb,CAAkBC,KAAK,eAAvB,aAGA,kBAACH,EAAA,EAAYI,QAAb,MACA,kBAACJ,EAAA,EAAYE,KAAb,CAAkBC,KAAK,eAAvB,0BCtCHE,EARA,SAACxB,GACd,OACE,yBAAKiB,UAAU,eACb,kBAAC,EAAD,Q,iKCTC,IAAMQ,EAAY5B,UAAMC,IAAT,KCcP4B,EARA,SAAC1B,GACd,OACE,6BACE,kBAACyB,EAAD,0BCLAE,EAAWC,IAAMC,MAAK,kBAAM,8DAC5BC,EAAaF,IAAMC,MAAK,kBAAM,8DA8BrBE,MA7Bf,WAAgB,IAAD,EACmBC,oBAAS,GAD5B,mBACNC,EADM,KACKC,EADL,KAOb,OALAC,qBAAU,WACRC,YAAW,WACTF,GAAW,KACV,OACF,IAED,yBAAKjB,UAAU,OACZgB,EACC,yBAAKhB,UAAU,WACb,kBAAC,WAAD,CAAUoB,MAAM,MAAMC,KAAK,OAAOC,SAAS,UAG7C,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,EAAD,MACA,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,sBACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWlB,IACjC,kBAAC,IAAD,CAAOgB,KAAK,cAAcE,UAAWf,MAGzC,kBAAC,EAAD,SClBUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0bbe4656.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cb85c416.svg\";","import style from \"styled-components\";\r\n\r\nexport const Navwrapper = style.div`\r\nbackground-color:#FBB124;\r\nfont-family: \"Lora\", serif;\r\nform{\r\n    background-color:#fff;\r\n    border-radius:100px;\r\n    margin-left:40px;\r\n    height:40px;\r\n    padding: 0 20px;\r\n    input{\r\n        border:0;\r\n    }\r\n    input:focus{\r\n        box-shadow:none;\r\n    }\r\n}\r\n.navbar-light .navbar-nav .nav-link{\r\n    color:#000;\r\n}\r\n\r\n`;\r\n","import React, { Fragment } from \"react\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  NavDropdown,\r\n  Container,\r\n  Form,\r\n  FormControl,\r\n} from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Navwrapper } from \"./style\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FaSearch } from \"react-icons/fa\";\r\n/**\r\n * @author\r\n * @function Navbars\r\n **/\r\n\r\nconst Navbars = (props) => {\r\n  return (\r\n    <Fragment>\r\n      <Navwrapper>\r\n        <Container>\r\n          <Navbar expand=\"lg\">\r\n            <Link to=\"/\">\r\n              <img src={require(\"./../../assets/img/logo.svg\")} alt=\"logo\" />\r\n            </Link>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Form inline>\r\n                <FaSearch />\r\n                <FormControl\r\n                  type=\"text\"\r\n                  placeholder=\"Search\"\r\n                  className=\" mr-sm-2\"\r\n                />\r\n                {/* <Button type=\"submit\">Submit</Button> */}\r\n              </Form>\r\n              <Nav className=\"ml-auto\">\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  Home\r\n                </Link>\r\n                <Link to=\"/movies\" className=\"nav-link\">\r\n                  movies\r\n                </Link>\r\n                <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                  <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#action/3.2\">\r\n                    Another action\r\n                  </NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#action/3.3\">\r\n                    Something\r\n                  </NavDropdown.Item>\r\n                  <NavDropdown.Divider />\r\n                  <NavDropdown.Item href=\"#action/3.4\">\r\n                    Separated link\r\n                  </NavDropdown.Item>\r\n                </NavDropdown>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        </Container>\r\n      </Navwrapper>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Navbars;\r\n","import React from \"react\";\r\nimport Navbars from \"../Navbars\";\r\n\r\n/**\r\n * @author\r\n * @function Header\r\n **/\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className=\"main-header\">\r\n      <Navbars />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import style from \"styled-components\";\r\n\r\nexport const Copyright = style.div`\r\n    background:#000;\r\n    color:#fff;\r\n    text-align:center;\r\n    padding:20px;\r\n`;\r\n","import React from \"react\";\r\nimport { Copyright } from \"./style\";\r\n\r\n/**\r\n * @author\r\n * @function Footer\r\n **/\r\n\r\nconst Footer = (props) => {\r\n  return (\r\n    <div>\r\n      <Copyright>@CopyRight 2020</Copyright>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\r\nimport Header from \"./Components/Header\";\r\nimport { CubeGrid } from \"styled-loaders-react\";\r\nimport Footer from \"./Components/Footer\";\r\nconst Homepage = React.lazy(() => import(\"./Components/Homepage\"));\r\nconst SinglePage = React.lazy(() => import(\"./Components/SinglePage\"));\r\nfunction App() {\r\n  const [loadering, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 2000);\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      {loadering ? (\r\n        <div className=\"loading\">\r\n          <CubeGrid color=\"red\" size=\"60px\" duration=\"1.5s\" />\r\n        </div>\r\n      ) : (\r\n        <HashRouter basename=\"/\">\r\n          <Header />\r\n          <React.Suspense fallback={\"loading...........\"}>\r\n            <Switch>\r\n              <Route path=\"/\" exact component={Homepage} />\r\n              <Route path=\"/movies/:id\" component={SinglePage} />\r\n            </Switch>\r\n          </React.Suspense>\r\n          <Footer />\r\n        </HashRouter>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}